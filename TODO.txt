* SSAO
** SAO
** Cutout support
** Scale application by sin_theta_sqrd / solidangle of light_source to avoid applying AO to delta lights.
** Store normals as octahedral normal. 16 or 32 bit?
** Adjust depth bias from local depth-variance? Low variance => high bias
** Use reverse Z for stabile Z
*** https://mynameismjp.wordpress.com/2010/03/22/attack-of-the-depth-buffer/
*** There's a depth format???
** Adjust shrink hemisphere by dot(hard_normal, shading_normal)
** Multiscale AO
** Spherical gaussians (Sphaussian?) for AO (bent normal + std dev) multiplied by material sgaussian 
** Use bent normal for diffuse env map lookup.
** Blog post?

BACKLOG:
* OptiXrenderer: Create half4 { __half x, y, z, w; } and use in GPU code instead of ushort4.
* Film grain
* Screenshot
** Request backbuffer through the composer. (when the image is converged)
*** Request to composer or through the camera.
*** Expose certain backbuffer state pr camera/viewport in a renderer interface. Fx iteration_count, is_continuous_renderer and so on. Members that can be used to evaluate the 'doneness' of a backbuffer.
**** Investigate and potentially use C++ async concepts for this.
*** Both HDR and LDR buffers. HDR buffers should not be tone mapped, color corrected or gamma corrected.
** Render to offscreen buffer stored on the camera.
*** Let it iterate for multiple frames to converge.
** Render to window if a window is specified. Can a window and framebuffer have separate viewports? And then what? Render with the highest resolution and downscale?
* OptiX (filtering) backends
** Try OptiX 5 AI denoiser
** Filter neighbouring light samples before reconstruction - Screen space photon mapping approach with MIS weights / Path filtering.
*** Output buffers: Material ID, texcoord, position, normal, ray dir, weight, light sample, indirect sample. Define for compressing directions and use half/byte for some values.
*** Output screen space sample based on path/BSDF PDF.
**** Perhaps select a vertex if the BSDF PDF is less than 1 / PI or maybe even a bit more. Then vertices are selected roughly proportional to how 'diffuse' they are.
**** Trace ray footprint by assuming the ray is a cone. Then use Distributions::Cone::CosTheta(float angle) to compute the angle of each new cone after an intersection and use that for the density estimation kernel bandwidth.
** Pass BSDF and light sample to the path tracing RGP and let it handle accumulated radiance.
* GLFW 3.3 - Handle windows high DPI scaling.
* Material improvements
** Metal specular tint should go to white at grazing angles.
** Importance sample improvement?
*** Gold, which is a specular metal, has a specular weight of 0.6, so it's (supposedly) 40% diffuse.
*** The black rubber ball in TestScene produces a lot of nearly black samples. Must be from GGX?
** Rho approximation.
*** GGX contribution seems too strong. Materials are too bright.
*** Perhaps computing the relation between GGX tint and rho would help figure out how much light scatters to the diffuse layer and how much the specular metal layers will reflect?
** Add coat.
*** http://jcgt.org/published/0003/04/03/paper-lowres.pdf
*** https://www.youtube.com/watch?v=4nKb9hRYbPA
*** Or just add a GGX layer on top with an iridescence parameter (red and blue fresnel offset relative to green.)
* Multiple cameras.
* Normals revisited
** Offset slightly along the geometric normal as well? To avoid self shadowing and hard edges on tesselated balls.
*** Or perhaps offset along the incoming direction? That one should obviously not intersect anything else.
** Bump mapping
*** Filter bumpmap mipmaps using Toksvig05, SGGX or AGAA NDF construction.
*** Compute AO maps based on normal maps.
** 'Fix' the normals at edges. Let the shading normal lerp towards the geometric normal at grazing angles. (Offset normal by -view_dir until the dot product is 0.)
* BTDF
** Transmission factor.
*** Use IOR computed from specularity.
* Multiple scenes.
** Only nodes in a certain scene should be rendered.
** Should a scene node know if it is in a scene and in which? Store the root scene ID pr node?'
** When loading models/scenes, store them in scene 0, i.e. the invalid one.
* 3DS, STL and PLY loader.
* Serialize scene and models, perhaps just build GLFT importer and exporter at first. https://github.com/KhronosGroup/glTF
** https://github.com/syoyo/tinygltf

libs
* RtAudio wrapper - https://github.com/thestk/rtaudio
* Emscripten
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* Tiny-dnn / DirectML. Use CuDNN directly for inference.