* Mesh combiner.
** Forsyth index sorting. Lets see if it speeds up OptiX rendering. https://code.google.com/archive/p/vcacne/
** What about vertex sorting? Base it on a morton curve, order of appearance in the index array or 'clustered index array position'.
* Rename UID::get_ID to get_index. 
* Build prepare bat-file.
* Reenable firefly clamping.
** Light contribution clamping should be done on the sampled light radiance, not the radiance scaled by the BRDF.
* Stl loader.
* Reduce TODOs.
** There are some in the MIS sampling.
** Precompute material parameters for DefaultShading and profile.
** Etc
* Bump mapping
** Utility function for computing tangents and normals on bump mapped surfaces. Possibly splitting the mesh.
** Including 'fixing' the normals at edges. Let the shading normal lerp towards the geometric normal at grazing angles.
** Offset slightly along the geometric normal as well? To avoid self shadowing and hard edges on tesselated balls.
*** Or perhaps offset along the incoming direction? That one should obviously not intersect anything else.
* Materials revisited.
** Is sRGB / gamma correctly handled? The X-Wing looks really dark in environments. Or am I missing a multiplication by pi? Use the sphere scene with a pure diffuse material to test it.
** Rough transmitting surfaces.
** Add Burley and Oren-Nayar BRDF. Burley should exclude the fresnel term, as that is part of the overall combiner.
** Use perfectly specular BRDFs for tiny roughness values.
*** Adapt MIS to handle specular surfaces.
** Add coat.
* GL Renderer
** Half4 backbuffer in OptiXRenderer
* Multiple cameras.
** G-Buffer pr camera.
** Compose when all cameras are done.
* Screenshot
** Grab backbuffer on the CPU.
*** Request to composer or through the camera, not renderers
*** Expose certain backbuffer state pr camera/viewport in a renderer interface. Fx iteration_count, is_continuous_renderer and so on. Members that can be used to evaluate the 'doneness' of a backbuffer.
** Render to offscreen buffer.
* Multiple scenes.
** Only nodes in a certain scene should be rendered.
** Should a scene node know if it is in a scene and in which? Store the root scene ID pr node?
* Serialize scene and models.

libs
* Emscripten
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* OpenEXR + ZLib or TinyEXR.
* Add ZLib and LibPNG.
** Generalize CMake source download function / macro. Found in GLFW.
