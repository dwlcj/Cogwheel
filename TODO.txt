* VS compiler flags. /debug:fastlink in VS2015 and fast float operations. Tests should use precise.
* The IBL in the Rungholt scene at 3Shape is very dark in DX11 renderer. Check gamma and backbuffer precision.
** Texture / image VS debugging helpers.
* OptiXRenderer
** Verify that highest_area_light_index_updated in the OptiXRenderer behaves correctly.
** Half4 backbuffer in OptiXRenderer and render directly to a mapped DX resource.
** Logarithmic data upload: bitcount((frame_ID >> 3) + 1) == 1. Do we gain any performance from it?
** Filtering
* Revisit environment map (2D image) importance sampling. Try the new approach where pixels can be looked up almost immediatly.
* Materials revisited.
** Add coat.
* Multiple cameras.
** G-Buffer pr camera.
** Compose when all cameras are done.
* Screenshot
** Grab backbuffer on the CPU.
*** Request to composer or through the camera, not renderers
*** Expose certain backbuffer state pr camera/viewport in a renderer interface. Fx iteration_count, is_continuous_renderer and so on. Members that can be used to evaluate the 'doneness' of a backbuffer.
**** Investigate and potentially use C++ async concepts for this.
** Render to offscreen buffer.
* Normals revisited
** Bump mapping
*** Filter bumpmap mipmaps using Toksvig05, SGGX or AGAA NDF construction.
** 'Fix' the normals at edges. Let the shading normal lerp towards the geometric normal at grazing angles. (Offset normal by -view_dir until the dot product is 0.)
** Offset slightly along the geometric normal as well? To avoid self shadowing and hard edges on tesselated balls.
*** Or perhaps offset along the incoming direction? That one should obviously not intersect anything else.
* BTDF
** Transmission factor.
*** Use IOR computed from specularity.
* Multiple scenes.
** Only nodes in a certain scene should be rendered.
** Should a scene node know if it is in a scene and in which? Store the root scene ID pr node?
* 3DS, STL and PLY loader.
* Serialize scene and models.

libs
* Emscripten
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* OpenEXR + ZLib or TinyEXR.
