* Encode normal.z sign in .x's exponent sign bit.
* Natvis extension for wrapper classes?
* Add background colors and environment to scenes?
* Environment models.
* Reduce TODOs
* Bump mapping
** Utility function for computing tangents and normals on bump mapped surfaces. Possibly splitting the mesh.
** Including 'fixing' the normals at edges. Let the shading normal lerp towards the geometric normal at grazing angles.
** Offset slightly along the geometric normal as well? To avoid self shadowing and hard edges on tesselated balls.
*** Or perhaps offset along the incoming direction? That one should obviously not intersect anything else.
* Materials revisited.
** Add Fresnel coat. How to sample the Fresnel combiner? Add it as a coated shading model in OptiXRenderer, so I have access to both materials.
** Add Burley and Oren-Nayar BRDF. Burley should exclude the fresnel term, as that is part of the overall combiner.
** Use perfectly specular BRDFs for tiny roughness values.
*** Adapt MIS to handle specular surfaces.
* GL Renderer
* Multiple cameras.
** G-Buffer pr camera.
** Compose when all cameras are done.
* Screenshot
** Grab backbuffer on the CPU.
*** Request to composer or through the camera, not renderers
*** Expose certain backbuffer state pr camera/viewport in a renderer interface. Fx iteration_count, is_continuous_renderer and so on. Members that can be used to evaluate the 'doneness' of a backbuffer.
** Render to offscreen buffer.
* Multiple scenes.
** Only nodes in a certain scene should be rendered.
** A scene node should know if it is in a scene and in which. Store the root scene ID pr node?
** A requirement for the asset manager to not simply add loaded nodes directly into the scene.
* Serialize scene and models.
* CUDA
** helper methods.
*** Debugging/error checking. Array management.

libs
* Add ZLib and LibPNG.
** Generalize CMake source download function / macro. Found in GLFW.
* OpenEXR.
* Emscripten
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)