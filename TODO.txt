BACKLOG:
* OptiXRenderer: Investigate ray misses. Try a simpler scene than TestScene. Intersection count. White outer ring, blue and red inner.

* https://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph07-poissondisk.pdf
* OptiXRenderer filtering.
** Reconstruction filters
*** Pr pixel.
*** Linear.
*** Mitchell.
** Filter neighbouring light samples before reconstruction.
*** Screen space photon mapping approach with MIS weights, then add a (recursive?) bilateral blur for everything not yet filtered.
*** Needs ray differentials.
* CUDA 8.0 / DirectX / OptiX interop chain
* Material improvements
** Metal specular color should go to white at grazing angles.
** Importance sample improvement? Gold material in SphereScene has a bunch of checker artefacts, possibly from the BSDF sampling or MIS weighting. The material is practically specular though.
*** Pr pixel debug with pixel indication?
*** Gold, which is a specular metal, has a specular weight of 0.6, so it's (supposedly) 40% diffuse.
** IBL rho intensity.
*** Specularity increase is too strong.
*** Metals are too bright at grazing angles.
*** Perhaps computing the relation between GGX tint and rho would help figure out how much light scatters to the diffuse layer and how much the specular metal layers will reflect?
** Add coat.
*** http://jcgt.org/published/0003/04/03/paper-lowres.pdf
*** https://www.youtube.com/watch?v=4nKb9hRYbPA
*** Or just add a GGX layer on top with an iridescence parameter (red and blue fresnel offset relative to green.)
* VS compiler flags /debug:fastlink in VS2015. Use /GL (Enable link-time code generation), /LTCG (Use Link Time Code Generation) and /INCREMENTAL:NO (Disable Incremental Linking)
** Perhaps create cmake macros for setting up executables and libraries.
* Multiple cameras.
* Screenshot
** Render to offscreen buffer.
** Grab backbuffer on the CPU. (when the image is converged)
*** Request to composer or through the camera.
*** Expose certain backbuffer state pr camera/viewport in a renderer interface. Fx iteration_count, is_continuous_renderer and so on. Members that can be used to evaluate the 'doneness' of a backbuffer.
**** Investigate and potentially use C++ async concepts for this.
* Normals revisited
** Offset slightly along the geometric normal as well? To avoid self shadowing and hard edges on tesselated balls.
*** Or perhaps offset along the incoming direction? That one should obviously not intersect anything else.
** Bump mapping
*** Filter bumpmap mipmaps using Toksvig05, SGGX or AGAA NDF construction.
** 'Fix' the normals at edges. Let the shading normal lerp towards the geometric normal at grazing angles. (Offset normal by -view_dir until the dot product is 0.)
* BTDF
** Transmission factor.
*** Use IOR computed from specularity.
* Multiple scenes.
** Only nodes in a certain scene should be rendered.
** Should a scene node know if it is in a scene and in which? Store the root scene ID pr node?
* 3DS, STL and PLY loader.
* Serialize scene and models.

libs
* RtAudio wrapper - https://github.com/thestk/rtaudio
* Emscripten
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* ARGH! Command line passing tool - https://github.com/adishavit/argh
* MXNet for deep learning. Or just use cuDNN and ignore the abstractions.
