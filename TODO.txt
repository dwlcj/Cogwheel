BACKLOG:
* Should mutating and non-mutating callbacks be std::functions instead? If it cleans up the code then yes.
* SSAO: In cornell scene there is some AO bleeding at top and bottom of the image.
* SSAO: In test scene SSAO background bleed into the moving rings. But ONLY when they are moving?!? And it seems to be from the upper left corner. So probably an index error.
* Faster convergence
** Rho approximation.
*** GGX contribution seems too strong. Materials are too bright.
*** Perhaps computing the relation between GGX tint and rho would help figure out how much light scatters to the diffuse layer and how much the specular metal layers will reflect?
** Reverse halton sequence
** Faure-permuted Halton sequence sample, http://gruenschloss.org/
* OptiX (filtering) backends
** Try OptiX 5 AI denoiser
** Filter neighbouring light samples before reconstruction - Screen space photon mapping approach with MIS weights / Path filtering.
*** Output buffers: Material ID, texcoord, position, normal, ray dir, weight, light sample, indirect sample. Define for compressing directions and use half/byte for some values.
*** Output screen space sample based on path/BSDF PDF.
**** Perhaps select a vertex if the BSDF PDF is less than 1 / PI or maybe even a bit more. Then vertices are selected roughly proportional to how 'diffuse' they are.
**** Trace ray footprint by assuming the ray is a cone. Then use Distributions::Cone::CosTheta(float angle) to compute the angle of each new cone after an intersection and use that for the density estimation kernel bandwidth.
** Pass BSDF and light sample to the path tracing RGP and let it handle accumulated radiance.
* SDF shadows - check UE4
* SSBN
** Bent normal
*** Path tracer backend (Also one for SSAO?)
*** For diffuse env map lookup.
*** For cones compute aparture from visibility
*** Intersect bent cone with light cone or distribution and bake into 3D LUT (GTSO)
* GLFW 3.3 - Handle windows high DPI scaling.
* Material improvements
** Metal specular tint should go to white at grazing angles.
** Importance sample improvement?
*** The black rubber ball in TestScene produces a lot of nearly black samples. Must be from GGX?
** Add coat.
*** http://jcgt.org/published/0003/04/03/paper-lowres.pdf and https://www.youtube.com/watch?v=4nKb9hRYbPA
*** Or just add a GGX layer on top with an iridescence parameter (red and blue fresnel offset relative to green.)
* Normals revisited
** Offset slightly along the geometric normal as well? To avoid self shadowing and hard edges on tesselated balls.
*** Or perhaps offset along the incoming direction? That one should obviously not intersect anything else.
** Bump mapping
*** Filter bumpmap mipmaps using Toksvig05, SGGX or AGAA NDF construction.
*** Compute AO maps based on normal maps.
** 'Fix' the normals at edges. Let the shading normal lerp towards the geometric normal at grazing angles. (Offset normal by -view_dir until the dot product is 0.)
** Or warp the hemisphere by the shading normal, such that the hemisphere is turned into a cone that only grazes the surface. That way samples would need to be converted from hemisphere to cone and back again. Pro: No special casing on light / view direction. Con: Black surface when view dir is outside the cone.
** Perhaps just dim 'blocked' regions as they could be lit indirectly.
* BTDF
** Transmission factor.
*** Use IOR computed from specularity.
* Multiple scenes.
** Only nodes in a certain scene should be rendered.
** Should a scene node know if it is in a scene and in which? Store the root scene ID pr node?'
** When loading models/scenes, store them in scene 0, i.e. the invalid one.
* 3DS, STL and PLY loader.
* Serialize scene and models, perhaps just build GLFT importer and exporter at first. https://github.com/KhronosGroup/glTF
** https://github.com/syoyo/tinygltf

libs
* RtAudio wrapper - https://github.com/thestk/rtaudio
* LuaJit - OpenSource (Fallback to interpretted Lua if the target architecture isn't supported.)
* Emscripten